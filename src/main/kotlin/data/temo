    var id: Long
    val name: String
    val coordinates: Coordinates
    val creationDate: LocalDate
    val minimalPoint: Int
    val description: String
    val tunedInWorks: Long
    val difficulty: Difficulty
    val discipline: Discipline


    init {
        this.id = id
        this.name = name
        this.coordinates = coordinates
        creationDate = LocalDate.now()
        this.minimalPoint = minimalPoint
        this.description = description
        this.tunedInWorks = tunedInWorks
        this.difficulty = difficulty
        this.discipline = discipline
    }

    override fun toString(): String {
        return "LabWork {" +
                "id=" + id +
                ", name=" + name +
                ", coordinate_x=" + this.coordinates.x + ", coordinate_y=" + this.coordinates.y +
                ", creationDate=" + creationDate +
                ", minimalPoint=" + minimalPoint +
                ", description=" + description +
                ", tunedInWorks=" + tunedInWorks +
                ", difficulty=" + this.difficulty +
                ", discipline_name=" + this.discipline.name + ", practice_hours=" + this.discipline.practiceHours + "}"
    }



@Serializable
data class Data(val name: String, val coordinate_x: Int, val coordinate_y: Double, val minimalPoint: Int, val description: String, val tunedInWorks: Long,
                val difficulty: String, val discipline: Discipline)


val collectionManager = CollectionManager()
var num = 0

fun fileRead(filePath: String): String {
    val fr = FileReader(filePath)
    var ch: Int
    var input = ""
    do {
        ch = fr.read()
        if (ch == -1)
            break
        input += ch.toChar()
    } while (true)
    fr.close()
    return input
}


fun fileWrite(filePath: String) {
    var ans = ""
    ans += "[\n\t"

    for (elem in collectionManager.getAllElements()) {
        val decoded = encodeElem(elem)
        ans += "$decoded,\n"
    }
    ans = ans.dropLast(2) + "\n"
    ans += "]"
    File(filePath).bufferedWriter().use { out -> out.write(ans) }
}

fun encodeElem(elem: LabWork) : String {
    val difficulty = elem.difficulty.toString()
    val discipline = Discipline(elem.discipline.name,elem.discipline.practiceHours)
    val coordinates = Coordinates(elem.coordinates.x,elem.coordinates.y)
    val data = Data(elem.name, elem.coordinates.x, elem.coordinates.y, elem.minimalPoint,elem.description,elem.tunedInWorks,difficulty,discipline)
    return format.encodeToString(data)
}

fun parse(filePath: String) {
    createObjects(parseJson(filePath))
}

fun parseJson(filePath: String): List<Data> {
    val input = fileRead(filePath)
    return Json.decodeFromString(input)
}


fun createObjects(list: List<Data>) {
    var i = 1;
    for (elem in list) {
        val id = collectionManager.generateId()
        val name = elem.name
        val coordinates = Coordinates(elem.coordinate_x,elem.coordinate_y)
        val minimalPoint = elem.minimalPoint
        val description = elem.description
        val tunedInWorks = elem.tunedInWorks
        val difficulty = Difficulty.valueOf(elem.difficulty)
        val discipline = Discipline(elem.discipline.name, elem.discipline.practiceHours)
        val labWork = LabWork(id,name, coordinates, minimalPoint, description, tunedInWorks, difficulty, discipline)
        num++
        val temp = CollectionKey(num)
        collectionManager.addElem(temp, labWork)
        i++
    }
}








fun executeScriptRequest(str: String): CommandResult {
        if (str.split(Regex(" ")).toTypedArray().size == 1) {
            val commands: List<String> = fileRead(str).split("\n")
            for (command in commands) {
                val temp = (command.trim() + " ").split(" ").toTypedArray()
                ExecuteScript.execution.executeCommand(temp[0],temp[1])
            }
            return CommandResult(true,"Скрипт выполнен")
        } else return CommandResult(false,"error: Неправильный файл")
    }